{{/*
	The license inside this block applies to this file
	Copyright 2025 Google Inc.
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/ -}}


type Date struct {
	// Day: Day of a month. Must be from 1 to 31 and valid for the year and month,
	// or 0 to specify a year by itself or a year and month where the day isn't
	// significant.
	Day int `json:"day,omitempty"`
	// Month: Month of a year. Must be from 1 to 12, or 0 to specify a year without
	// a month and day.
	Month int `json:"month,omitempty"`
	// Year: Year of the date. Must be from 1 to 9999, or 0 to specify a date
	// without a year.
	Year int `json:"year,omitempty"`
}

type TimeOfDay struct {
	// Hours: Hours of a day in 24 hour format. Must be greater than or equal to 0
	// and typically must be less than or equal to 23. An API may choose to allow
	// the value "24:00:00" for scenarios like business closing time.
	Hours int `json:"hours,omitempty"`
	// Minutes: Minutes of an hour. Must be greater than or equal to 0 and less
	// than or equal to 59.
	Minutes int `json:"minutes,omitempty"`
	// Nanos: Fractions of seconds, in nanoseconds. Must be greater than or equal
	// to 0 and less than or equal to 999,999,999.
	Nanos int `json:"nanos,omitempty"
	// Seconds: Seconds of a minute. Must be greater than or equal to 0 and
	// typically must be less than or equal to 59. An API may allow the value 60 if
	// it allows leap-seconds.
	Seconds int `json:"seconds,omitempty"`
}


func expand{{$.GetPrefix}}{{$.TitlelizeProperty}}(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	if v == nil {
		return nil, nil
	}

	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}
    layout:="2006-01-02 15:04"
    result := make([]interface{}, len(l))
    
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		if val := reflect.ValueOf(original["start"]); val.IsValid() && !tpgresource.IsEmptyValue(val) {
       dt,err:=  time.Parse(layout, original["start"].(string))
	       if err!=nil{
  	             return nil, fmt.Errorf("failed to parse time '%s' with supported formats (%v): %w", original, layout, err)
           }
       transformed["startDate"] =  Date{
			Day: dt.Day(),
			Month: int(dt.Month()),
			Year: dt.Year(),
		   }
		   transformed["startTime"] = TimeOfDay{
			Hours: dt.Hour(),
			Minutes: dt.Minute(),
		   }
		}
		if val := reflect.ValueOf(original["end"]); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			dt,err:=  time.Parse(layout,original["end"].(string))
			if err!=nil{
  	             return nil, fmt.Errorf("failed to parse time '%s' with supported formats (%v): %w", original, layout, err)
			}
			transformed["endDate"] =  Date{
			 Day: dt.Day(),
			 Month: int(dt.Month()),
			 Year: dt.Year(),
			}
			transformed["endTime"] = TimeOfDay{
			 Hours: dt.Hour(),
			 Minutes: dt.Minute(),
 			}
		 }

		result = append(result, transformed)
	}

	return result, nil

 }
